;
; File generated by cc65 v 2.17 - Git 644d623d
;
	.fopt		compiler,"cc65 v 2.17 - Git 644d623d"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_rand8
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_ppu_addr
	.import		_seed_rng
	.export		_palette
	.export		_text
	.export		_LETTERA
	.export		_address
	.export		_main

.segment	"RODATA"

_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_text:
	.byte	$48
	.byte	$45
	.byte	$4C
	.byte	$4C
	.byte	$4F
	.byte	$20
	.byte	$57
	.byte	$4F
	.byte	$52
	.byte	$4C
	.byte	$44
	.byte	$21
_LETTERA:
	.byte	$41

.segment	"BSS"

_address:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; pal_bg(palette); // load the palette, this can be done any time, even with rendering on
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer(); // resets the index to zero, to start filling the buffer
;
	jsr     _clear_vram_buffer
;
; address = get_ppu_addr(0,0x38,0xc0); // (char nt, char x, char y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     #$38
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer('C', address); // another 1 byte write
;
	lda     #$43
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; multi_vram_buffer_horz(text, sizeof(text), NTADR_A(10,7)); // pushes 12 bytes, horz
;
	jsr     decsp3
	lda     #<(_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$EA
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi(); // waits till nmi, and push new updates to the ppu
;
L0049:	jsr     _ppu_wait_nmi
;
; clear_vram_buffer(); // clear the buffer at the start of each frame
;
	jsr     _clear_vram_buffer
;
; seed_rng(); // the frame count was ticking up every frame till Start pressed
;
	jsr     _seed_rng
;
; address = get_ppu_addr(0,rand8(),rand8()); // (char nt, char x, char y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	jsr     _rand8
	ldy     #$00
	sta     (sp),y
	jsr     _rand8
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; one_vram_buffer(rand8(), address); // another 1 byte write
;
	jsr     _rand8
	jsr     pusha
	lda     _address
	ldx     _address+1
	jsr     _one_vram_buffer
;
; while (1){
;
	jmp     L0049

.endproc

